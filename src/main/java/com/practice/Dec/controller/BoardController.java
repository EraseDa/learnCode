package com.practice.Dec.controller;import com.practice.Dec.domain.BoardVO;import com.practice.Dec.domain.Criteria;import com.practice.Dec.domain.PageDTO;import com.practice.Dec.service.BoardService;import lombok.AllArgsConstructor;import lombok.extern.log4j.Log4j2;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.support.RedirectAttributes;@Controller //스프링빈으로 인식하게@Log4j2 //@RequestMapping("/board/*") // '/board'로 시작하는 모든 처리를 아래 컨트롤러가 하도록 지정함@AllArgsConstructor //생성자를 만들어 자동으로 주입하도록 해줌, 이걸 사용하지 않을경우 service를 @Autowired로 연결해주기public class BoardController {    //10.2.1 목록에 대한 처리와 테스트    private BoardService service;    @GetMapping("/list")    public void list(Criteria cri, Model model){        log.info("[ ===== Controller list() START ===== ]");        //log.info("===== list() Model Before =====" + model); //비어있어야함        log.info("===== list() cri Before =====" + cri);        //service의 getList()메소드로 가져온값을 model에 추가해줌        //service.getList() 리턴값 = List<BoardVO>        model.addAttribute("list",service.getList(cri));        int total = service.getTotal(cri);        log.info("[ total ] : " + total);        model.addAttribute("pageMaker",new PageDTO(cri,total)); //page정보 담아주기        log.info("===== list() Model After =====" + model); //getList의 결과값이 출력되어야함    }    //10.2.2 등록 처리와 테스트    @PostMapping("/register")    //RedirectAttributes : 등록작업이 끝난 후 다시 목록화면으로 이동할 때 새롭게 등록된 게시물의 번호를 같이 전달하기 위한용도    public String register(BoardVO board, RedirectAttributes rttr){        log.info("[ ===== Controller register()_POST START ===== ]");        log.info("[ BoardVO_Before ] : " + board);        service.register(board);        rttr.addFlashAttribute("result",board.getBno());        log.info("[ BoardVO_After ] : " + board);        return "redirect:/board/list";        //접두어 "redirect:" : 스프링MVC가 내부적으로 response.sendRedirect()를 처리해줌    }    //11.3 등록 입력페이지와 등록처리    @GetMapping("/register")    public void register(){        //별도의 return 값이 없을경우 getMapping의 url에 해당하는 jsp페이지를 찾아서 반환해줌        log.info("[ ===== Controller register()_GET START ===== ]");    }    //10.2.3 조회 처리와 테스트    //11.5.1 수정/삭제 페이지로 이동 : '/modify' 를 추가해줌    @GetMapping({"/get", "/modify"})//특별한 경우가 아니라면 조회는 get방식으로 처리함    public void get(@RequestParam("bno") Long bno, @ModelAttribute("cri") Criteria cri, Model model){        log.info("[ ===== Controller : get() or modify() ===== ]");        model.addAttribute("board",service.get(bno));    }    //10.2.4 수정 처리와 테스트    //수정작업을 시작하는 화면은 get 방식으로 접근하지만, 실제 작업(수정)은 post방식으로 동작하으로 PostMapping을 이용해서 처리    @PostMapping("/modify")    public String modify(BoardVO board,@ModelAttribute("cri") Criteria cri, RedirectAttributes rttr){        log.info("[ ===== Controller modify() START ===== ]");        //log.info("[ BoardVO_Before ] : " + board);        //service.modify()를 실행할거야, 리턴값은 boolean이고 수정된 내용이 있다면 1(true)를 반환하겠지        if(service.modify(board)){            //수정된 내용이 있다면, 해당 결과를 RedirectAttributes에 담아준다.            rttr.addFlashAttribute("result", "success");        }        //15.4 UriComponentsBuilder를 이용하면 아래 코드 생략가능//        rttr.addAttribute("pageNum",cri.getPageNum());//        rttr.addAttribute("amount",cri.getAmount());//        //15.4.3 수정/삭제 페이지에서 검색처리 : 수정삭제는 retirect방식으로 동작하므로 타입, 키워드를 리다이렉트시 포함시켜줘야함//        rttr.addAttribute("type",cri.getType());//        rttr.addAttribute("keyword",cri.getKeyword());        //log.info("[ BoardVO_After ] : " + board);        return "redirect:/board/list" + cri.getListLink();    }    //10.2.5 삭제 처리와 테스트    //삭제는 반드시 POST방식으로만 처리함    @PostMapping("/remove")    public String remove(@RequestParam("bno")Long bno, @ModelAttribute("cri") Criteria cri, RedirectAttributes rttr){        log.info("[ ===== Controller remove() START ===== ]");        log.info("[ bno Before ] : " + bno);        if(service.remove(bno)){            rttr.addFlashAttribute("result","success");        }        //15.4 UriComponentsBuilder를 이용하면 아래 코드 생략가능//        rttr.addAttribute("pageNum",cri.getPageNum());//        rttr.addAttribute("amount",cri.getAmount());//        //15.4.3 수정/삭제 페이지에서 검색처리 : 수정삭제는 retirect방식으로 동작하므로 타입, 키워드를 리다이렉트시 포함시켜줘야함//        rttr.addAttribute("type",cri.getType());//        rttr.addAttribute("keyword",cri.getKeyword());        return "redirect:/board/list"+cri.getListLink();    }}