package com.practice.Dec.mapper;import com.practice.Dec.domain.BoardVO;import com.practice.Dec.domain.Criteria;import lombok.Setter;import lombok.extern.log4j.Log4j2;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;import java.util.List;import static org.junit.jupiter.api.Assertions.*;//spring예제코드 어노테이션!! 이걸 최신버전에 맞게 & 스프링부트용으로 변환해야함//@RunWith(SpringJUnit4ClassRunner.class)//@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")@SpringBootTest//@SpringJUnitConfig //@ExtendWith과 @ContextConfiguration이 포함된 어노테이션이라는데... 오류남@Log4j2//복붙코드에선 아래 어노테이션을 사용하심//@MybatisTest  // 컨테이너 빈 설정//@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE) // 마이바티스 설정class BoardMapperTest {    /*     * setter어노테이션을 통해 해당 객체에 setter메소드를 주입시킨다.     * setter어노테이션을 이용하므로 new를 대체한다.     * onMethod속성은 생성되는 mapper에 @Autowired 어노테이션을 추가하도록 할 때 사용한다.     * 버전에 따라 onMethod 혹은 onMethod_를 사용하게 된다.     */    //@Setter(onMethod_ = @Autowired) //책 버전 어노테이션 : setter 메소드를 만들어 그 위에 autowired를 붙여줌    @Autowired    private BoardMapper mapper;    //8.1 영속 계층의 구현준비 _ 8.1.2 Mapper인터페이스와 Mapper XML    @Test    public void testGetList(){        mapper.getList().forEach(board->log.info(board));    }    //public void insert(BoardVO board);    @Test    public void testInsert(){        BoardVO board = new BoardVO();        // #{title}, #{content}, #{writer} 각 변수에 값 입력해주기        board.setTitle("testInsert_Title2");        board.setContent("testInsert_Content2");        board.setWriter("testInsert_Writer2");        mapper.insert(board);        log.info("[ inserted data (Board) ] : " + board);        //테스트 결과를 보면 bno=null로 출력되는걸 확인할 수 있음    }    //public void insertSelectKey(BoardVO board);    @Test    public void testInsertSelectKey(){        BoardVO board = new BoardVO();        // #{title}, #{content}, #{writer} 각 변수에 값 입력해주기        board.setTitle("testInsert_Title2");        board.setContent("testInsert_Content2");        board.setWriter("testInsert_Writer2");        mapper.insertSelectKey(board);        log.info("[ testInsertSelectKey | boardVO ] : " + board);        //test 결과에서 bno 확인가능 : BoardVO(bno=11, ... )    }    //8.2.2 read(select)처리    //public BoardVO read(Long bno);    @Test    public void testRead(){        BoardVO board = mapper.read(5L);        //mapper인터페이스의 read 메소드의 파라미터bno에 5L을 입력해줌        //메소드의 실행결과값은 BoardVO타입이고 board 에 결과가 입력됨        log.info("[ testRead | boardVO ] : " + board);    }    //8.2.3 delete 처리    //public int delete(Long bno);    @Test    public void testDelete(){        int deleteCnt = mapper.delete(8L);        log.info("[삭제된 데이터의 수 : " + deleteCnt + " ]");    }    //8.2.4 update 처리    @Test    public void testUpdate(){        BoardVO board = new BoardVO();        board.setBno(1L);        board.setTitle("update title");        board.setContent("update content");        board.setWriter("update writer");        int updateCnt = mapper.update(board);        log.info("[ Update Count : "+ updateCnt +" ]");    }    //13.1.1 페이징 테스트와 수정    @Test    public void testPaging(){        Criteria cri = new Criteria();        cri.setPageNum(1);        cri.setAmount(5);        List<BoardVO> list = mapper.getListWithPaging(cri);        list.forEach(board -> log.info(board));    }    //15.3 검색조건 처리를위한 Criteria    @Test    public void testSearch(){        Criteria cri = new Criteria();        cri.setKeyword("수정");        cri.setType("TW");        List<BoardVO> list = mapper.getListWithPaging(cri);        list.forEach(board -> log.info(board));    }}