package com.practice.Dec.service;import com.practice.Dec.domain.BoardVO;import com.practice.Dec.domain.Criteria;import com.practice.Dec.mapper.BoardMapper;import lombok.extern.log4j.Log4j2;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import static org.junit.jupiter.api.Assertions.*;//교재의 어노테이션들//@RunWith(SpringJUnit4ClassRunner.class)//@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")//그리고 내가 사용할 어노테이션@SpringBootTest@Log4j2class BoardServiceTest {    @Autowired    private BoardService service;    //9.2 비즈니스계층의 구현과 테스트 : BoardService객체가 제대로 주입이 가능한지 확인하는 테스트    @Test    public void testExist(){        log.info("[ testExist Result : " + service + " ]");        //[ testExist Result : com.practice.Dec.service.BoardServiceImpl@6d8b7ea9 ]        assertNotNull(service); //service 객체가 null이 아님을 확인하는 용도인듯    }    //9.2.1 등록작업의 구현과 테스트    @Test    public void testRegister() {        BoardVO board = new BoardVO();        board.setTitle("registerTest");        board.setContent("registerTest");        board.setWriter("registerTest");        service.register(board);        log.info("[ 생성된 게시물의 번호 : " + board.getBno() + " ]");    }    //9.2.3 조회작업의 구현과 테스트    @Test    public void testGet() {        log.info(service.get(10L));    }    //9.2.4 삭제/수정 구현과 테스트_수정    @Test    public void testModify() {        BoardVO board = service.get(10L); //10번에 해당하는 값들을 BoardVO객체로 담아줄거야        log.info("[ (1)가지고온 board 값 : "+board + " ]");        //조회하려는 값이 있는지 확인        if(board==null){            //가지고 온 값이 null인경우 메소드 종료            return;        }        //가지고온 값의 title만 수정해볼게, set메소드로 변경해주고        board.setTitle("제목 수정테스트!");        log.info("[ (2)수정한 board 값 : "+board + " ]");        //service의 modify메소드에 가져온값을 넣어 실행시킬게        log.info("[ Modify Result(수정결과 boolean값) : " + service.modify(board)+ " ]");    }    //9.2.4 삭제/수정 구현과 테스트 _ 삭제    @Test    public void testRemove() {        BoardVO board = service.get(6L);        //책의 예제코드엔 없었는데, 내가 그냥 if문으로 null확인후에 진행함        if(board != null){            log.info("[ 삭제결과 (삭제된 값이 있는경우 true) : " +service.remove(6L)+ " ]");        }        //일부러 데이터가 없는 6번으로 테스트함, 당연히 결과는 false    }    //9.2.2 목록(리스트)작업의 구현과 테스트    @Test    public void testGetList() {        //service.getList().forEach(board -> log.info(board));        service.getList(new Criteria(1,5)).forEach(board -> log.info(board));    }}