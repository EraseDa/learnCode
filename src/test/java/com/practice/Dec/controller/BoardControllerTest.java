package com.practice.Dec.controller;import lombok.Setter;import lombok.extern.log4j.Log4j2;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.stereotype.Controller;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.web.WebAppConfiguration;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MockMvcBuilder;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.web.context.WebApplicationContext;import static org.junit.jupiter.api.Assertions.*;//책에서 사용한 어노테이션//@RunWith(SpringJUnit4ClassRunner.class)//@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",//    "file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml"})//난 책세어 사용한 어노테이션 대신 이걸 사용한다(스프링 부트이므로)@SpringBootTest@WebAppConfiguration // Test for Controller : WebApplicationContext를 이용하기위한것@Log4j2class BoardControllerTest {    //10.2.1 목록에 대한 처리와 테스트    @Setter(onMethod_=@Autowired)    private WebApplicationContext ctx; //스프링이 관리하는 빈들이 담겨 있는 컨테이너    private MockMvc mockMvc; //테스트를 위해 사용할 가짜MVC    @BeforeEach    public void setUp(){        this.mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build(); //초기화    }    @Test    public void testList() throws Exception{        log.info(mockMvc.perform(MockMvcRequestBuilders.get("/board/list"))                .andReturn()                .getModelAndView()                .getModelMap()        );    }    //13.2.2 Boardontroller수정 : 기존 list조회에서 paging정보를 추가하여 test    @Test    public void testListPaging() throws Exception{        log.info(mockMvc.perform(MockMvcRequestBuilders.get("/board/list")                        .param("pageNum","1")                        .param("amount","10"))                .andReturn()                .getModelAndView()                .getModelMap()        );    }    //10.2.2 등록 처리와 테스트    @Test    public void testRegister() throws Exception{        String resultPage = mockMvc.perform(MockMvcRequestBuilders.post("/board/register")                .param("title", "테스트 새글 제목")                .param("content", "테스트 새글 내용")                .param("writer", "testUser")                ).andReturn().getModelAndView().getViewName();        log.info("[ resultPage ] :" + resultPage);    }    //10.2.3 조회 처리와 테스트    @Test    public void testGet() throws Exception{            //내 코드 : get의 URL에 bno를 줘버림        //log.info(mockMvc.perform(MockMvcRequestBuilders.get("/board/get?bno=1"))            //책 코드 : url로 get까지만 주고 bno는 .param을 통해서 별도로 전달함        log.info(mockMvc.perform(MockMvcRequestBuilders.get("/board/get").param("bno","1"))            .andReturn()            .getModelAndView()            .getModelMap()        );    }    //10.2.4 수정 처리와 테스트    @Test    public void testModify() throws Exception{        String resultPage = mockMvc.perform(MockMvcRequestBuilders.post("/board/modify")                .param("bno","15")                .param("title", "테스트 수정 제목")                .param("content", "테스트 수정 내용")                .param("writer", "testUser")                ).andReturn().getModelAndView().getViewName();        log.info("[ resultPage ] : " + resultPage);    }    //10.2.5 삭제 처리와 테스트    @Test    public void remove() throws Exception{        String resultPage = mockMvc.perform(MockMvcRequestBuilders.post("/board/remove")                .param("bno", "15"))                .andReturn().getModelAndView().getViewName();        log.info("[ resultPage ] : " + resultPage);    }}